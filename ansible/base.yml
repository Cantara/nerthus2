---
- name: Create resources in Tokyo region
  hosts: localhost
  connection: local
  vars:
    region: ap-northeast-1
    ami: ami-0bba69335379e17f8 #"ami-0bba69335379e17f8"
    instance_size: t3.micro #t4g.nano #t3.small
    cidr_base: 10.100.0
    service: wamper
    env: cantara-lab
    zone: lab.cantara.infra
  tasks:
    - set_fact:
        vpc_cidr: "{{ cidr_base }}.0/24"
        subnets:
          - { name: "{{ env }}-subnet-1", az: "{{ region }}a", cidr: "{{ cidr_base }}.0/26" }
          - { name: "{{ env }}-subnet-2", az: "{{ region }}b", cidr: "{{ cidr_base }}.64/26" }
          - { name: "{{ env }}-subnet-3", az: "{{ region }}c", cidr: "{{ cidr_base }}.128/26" }
        instances:
          - { name: "{{ env }}-{{ service }}-1", ami: "{{ ami }}" }
          - { name: "{{ env }}-{{ service }}-2", ami: "{{ ami }}" }
          - { name: "{{ env }}-{{ service }}-3", ami: "{{ ami }}" }
        key_name: "{{ env }}-key"
        vpc_name: "{{ env }}-vpc"
        lb_name: "{{ env }}-lb"
        security_group_name: "{{ env }}-{{ service }}-sg"
        target_group_name: "{{ env }}-{{ service }}-tg"
    - name: Create key pair
      ec2_key:
        name: "{{ key_name }}"
        region: "{{ region }}"
        key_type: "ed25519"
        state: present
      register: key_pair
    - name: check if key file exists
      stat:
        path: "{{ key_name }}.pem"
      register: keyfile
    - name: Copy private key to local machine
      copy:
        content: "{{ key_pair.key.private_key }}"
        dest: "{{ key_name }}.pem"
      when: keyfile.stat.exists == false
    - name: Set permissions on private key
      file:
        path: "{{ key_name }}.pem"
        mode: 0600
      when: keyfile.stat.exists == false
    - name: Create VPC
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr }}"
        ipv6_cidr: true
        region: "{{ region }}"
        state: present
      register: vpc
    - name: Ansible | Print ipv6
      debug:
        msg: "{{ vpc.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block[:17] }}{{ index }}::/64"
      loop: "{{ subnets | flatten(levels=1) }}"
      loop_control:
        index_var: index
    - name: Associate subnet to the VPC
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        cidr: "{{ item.cidr }}"
        assign_instances_ipv6: true
        ipv6_cidr: "{{ vpc.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block[:17] }}{{ index }}::/64"
        az: "{{ item.az }}"
        tags:
          Name: "{{ item.name }}"
      register: subnets
      loop: "{{ subnets | flatten(levels=1) }}"
      loop_control:
        index_var: index
    - name: Create ec2 vpc internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
      register: igw_result
    - name: Gather information about any VPC route table within VPC with ID vpc-abcdef00
      amazon.aws.ec2_vpc_route_table_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc.vpc.id }}"
      register: route_info
    - name: Ansible | Print route info
      debug:
        msg: "{{ route_info }}"
    - name: Create gateway route table
      amazon.aws.ec2_vpc_route_table:
        region: "{{ region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        lookup: id
        route_table_id: "{{ route_info.route_tables[0].id }}"
        tags:
          Name: Gateway route table
        #gateway_id: "{{ igw_result.gateway_id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_result.gateway_id }}"
          - dest: ::/0
            gateway_id: "{{ igw_result.gateway_id }}"
    - name: Create security group
      ec2_group:
        name: "{{ security_group_name }}"
        description: "Security group for instances"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: all
            group_name: "{{ security_group_name }}"
        state: present
      register: security_group
    - name: Create a private zone
      amazon.aws.route53_zone:
        zone: "{{ zone }}"
        vpc_id: "{{ vpc.vpc.id }}"
        vpc_region: "{{ region }}"
        comment: DNS for wamper lab cantara
    - name: Gather Facts to check if a similar instance is running
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ item.name }}"
      register: ec2_exists
      with_items: "{{ instances }}"
    - name: Display Details
      debug: var=ec2_exists
    - set_fact:
        ip_addresses_old: "{{ ec2_exists.results | selectattr('instances', 'defined') | map(attribute='instances') | flatten | selectattr('state.name','equalto','running') | map(attribute='private_ip_address') | list }}"
    - name: Route 53 A Record Update Before Launch
      amazon.aws.route53:
        state: present
        zone: "{{ zone }}"
        private_zone: true
        record: "{{ service }}.{{ zone }}"
        type: A
        ttl: 20
        value: "{{ ip_addresses_old }}"
        wait: yes
        overwrite: yes
      when: ip_addresses_old | count >= 1
    - name: Route 53 A Record Deleting Before Launch
      amazon.aws.route53:
        state: absent
        zone: "{{ zone }}"
        private_zone: true
        record: "{{ service }}.{{ zone }}"
        type: A
        ttl: 20
        wait: yes
        overwrite: yes
      when: ip_addresses_old | count == 0
    - name: Launch instances
      ec2_instance:
        key_name: "{{ key_name }}"
        security_group: "{{ security_group_name }}"
        count: 1
        instance_type: "{{ instance_size }}"
        image_id: "{{ item.ami }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ subnets.results[index].subnet.id }}"
        network:
          assign_public_ip: true
        volumes:
          - device_name: /dev/xvda
            ebs:
              volume_size: 20
              volume_type: "gp3"
        tags:
          Name: "{{ item.name }}"
        state: started
        wait: true
        user_data: |
          #!/bin/env sh
          yum install -y ansible > /dev/null
          amazon-linux-extras enable ansible2
          
          cd /home/ec2-user
          cat <<'EOF' > ./CRON
          MAILTO=""
          {{ index%3*10 }},{{ index%3*10+30 }} * * * * sudo yum update -y > /dev/null
          0 {{ 3+index }} * * 6 sudo reboot
          EOF
          chown ec2-user CRON
          chgrp ec2-user CRON

          sudo -u ec2-user crontab ./CRON

          adduser wamper

          cat <<'EOF' > su_to_wamper.sh
            #!/bin/env sh
          sudo su - wamper
          EOF

          chmod +x su_to_wamper.sh
          chown ec2-user su_to_wamper.sh
          chgrp ec2-user su_to_wamper.sh

          arci=$(uname -m)
          if [ "$arci" = "aarch64" ]; then
          arci="arm64"
          fi;
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_${arci}.rpm
          yum localinstall -y google-chrome-stable_current_${arci}.rpm
          rm google-chrome-stable_current_${arci}.rpm

          cd /home/wamper

          cat <<'SCREOF' > ./createWamper.sh
          mkdir eventmap

          cat <<'EOF' > ~/CRON
          MAILTO=""
          */6 * * * * ./buri -a buri -g no/cantara/gotools > /dev/null
          */6 * * * * ./buri -a wamper -g no/cantara/gotools -r > /dev/null
          */6 * * * * ./buri -a nerthus2/probe -g no/cantara/gotools > /dev/null
          */5 * * * * ./nerthus2-probe -d 5m -r "https://visuale.quadim.ai/api/status/eXOR/{{ service | capitalize }}/{{ item.name }}?service_tag=EventServices&service_type=A2A" -h "http://localhost:13030/{{ service }}/health" -a "{{ service }}" -t "go" > /dev/null &
          EOF


          crontab ~/CRON

          arci=$(uname -m)
          if [ "$arci" = "x86_64" ]; then
          arci="amd64"
          elif [ "$arci" = "aarch64" ]; then
          arci="arm64"
          fi;
          fname="buri-v0.7.0-$(uname | tr '[:upper:]' '[:lower:]')-$arci"
          curl --fail --show-error --silent -o "$fname" "https://mvnrepo.cantara.no/content/repositories/releases/no/cantara/gotools/buri/v0.7.0/$fname"
          ln -s "$fname" "buri"
          chmod +x "buri"

          cat <<'EOF' > ~/.env
          webserver.port=13030
          debug.port=6060

          eventstore.host=eventstore.{{ zone }}

          debug.user=labDebug
          debug.pass=syuperDebugLab

          screenshot.key=MgqHE2qIgboCKxgavuH/n1i36ddzkVRHTnsoGlM+IBI=
          screenshot.service.key=NkyQQ5mjRTTZq6e3c2vkv+JVWmgJAvjddtffYLDJWXM=
          slack.service.key=10igBbnXQymZ5lhLopBGeJNO+RO7MzBlrtnY3TgnvTY=
          authkey=b3+6ErSirqLVSrRI7pBS/VHqaCza8TtQOl5g1Lg/PYM=
          EOF

          ./buri -a buri -g no/cantara/gotools
          ./buri -a wamper -g no/cantara/gotools -r

          SCREOF
          chown wamper createWamper.sh
          chgrp wamper createWamper.sh
          chmod +x createWamper.sh

          sudo -u ./createWamper.sh
      #register: _alias_vc_0
      register: instances
      async: 3600
      poll: 0
      with_items: "{{ instances }}"
      loop: "{{ instances | flatten(levels=1) }}"
      loop_control:
        index_var: index
      when:
        - ec2_exists.results[index].instances | count == 0 or ec2_exists.results[index].instances | selectattr('state.name','equalto','running') | list | count == 0
    - name: Wait for instances launch to finish
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: instances
      #register: instances
      retries: 500
      delay: 5
      until: instances.finished
      #until: instances.finished
      loop: "{{instances.results}}"
      when:
        - item.finished is defined
        - item.finished == 0
    - name: Display New Instances
      debug: var=instances
    - set_fact:
        ip_addresses_new: "{{ instances.results | selectattr('instances', 'defined') | map(attribute='instances') | flatten | map(attribute='private_ip_address') | list }}"
    - set_fact:
        ip_addresses: "{{ ip_addresses_new + ip_addresses_old }}"
    - name: Display IPs
      debug: var=ip_addresses
    - name: Route 53 A Record Update After Launch
      amazon.aws.route53:
    - set_fact:
        instances_ids_old: "{{ ec2_exists.results | selectattr('instances', 'defined') | map(attribute='instances') | flatten | selectattr('state.name','equalto','running') | map(attribute='instance_id') | list }}"
        instances_ids_new: "{{ instances.results | selectattr('instances', 'defined') | map(attribute='instances') | flatten | selectattr('instance_id', 'defined') | map(attribute='instance_id') | list }}"
    - name: Display instance_ids_old
      debug:
        msg: "{{ instances_ids_old }}"
    - name: Display instance_ids_new
      debug:
        msg: "{{ instances_ids_new }}"
    - name: Create Application Load Balancer
      elb_application_lb:
        region: "{{ region }}"
      register: http_lb
    - name: Create Application Load Balancer Target Group
      elb_target_group:
        region: "{{ region }}"
      register: target_group
    - name: Add instances to target group
      elb_target:
        region: "{{ region }}"
      with_items: "{{ instances_ids_new + instances_ids_old }}"